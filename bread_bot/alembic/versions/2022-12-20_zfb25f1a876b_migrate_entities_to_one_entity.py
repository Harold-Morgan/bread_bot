"""migrate entities to one entity

Revision ID: zfb25f1a876b
Revises: f6f10d508983
Create Date: 2022-12-20 03:25:33.991800

"""
import datetime

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import ENUM

from bread_bot.common.utils.structs import AnswerEntityContentTypesEnum

# revision identifiers, used by Alembic.
revision = "zfb25f1a876b"
down_revision = "f6f10d508983"
branch_labels = None
depends_on = None

MAP = {
    "text_entities": AnswerEntityContentTypesEnum.TEXT,
    "gif_entities": AnswerEntityContentTypesEnum.ANIMATION,
    "video_entities": AnswerEntityContentTypesEnum.VIDEO,
    "video_note_entities": AnswerEntityContentTypesEnum.VIDEO_NOTE,
    "voice_entities": AnswerEntityContentTypesEnum.VOICE,
    "photo_entities": AnswerEntityContentTypesEnum.PICTURE,
    "sticker_entities": AnswerEntityContentTypesEnum.STICKER,
}


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    credential = sa.sql.table(
        "answer_entities",
        sa.Column("key", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.String(length=255), nullable=False),
        sa.Column("value", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime, nullable=False, default=sa.func.now()),
        sa.Column("updated_at", sa.DateTime, nullable=False, default=sa.func.now()),
        sa.Column(
            "reaction_type",
            ENUM("TRIGGER", "SUBSTRING", name="answerentitytypesenum", create_type=False),
            nullable=False,
        ),
        sa.Column(
            "content_type",
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("pack_id", sa.Integer(), nullable=True),
    )
    conn = op.get_bind()
    entities = []
    for table_name, content_type in MAP.items():
        if table_name == "photo_entities":
            res = conn.execute(f"select key, value, pack_id, reaction_type, description from {table_name}")
        else:
            res = conn.execute(f"select key, value, pack_id, reaction_type from {table_name}")
        res_entities = res.fetchall()
        for entity in res_entities:
            if table_name == "photo_entities":
                description = entity[4]
            else:
                description = (None,)
            entities.append(
                {
                    "is_active": True,
                    "created_at": datetime.datetime.now(),
                    "updated_at": datetime.datetime.now(),
                    "key": entity[0],
                    "value": entity[1],
                    "pack_id": entity[2],
                    "reaction_type": entity[3],
                    "content_type": content_type,
                    "description": description,
                }
            )
    op.bulk_insert(credential, entities)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    conn.execute("delete from answer_entities")
    # ### end Alembic commands ###
