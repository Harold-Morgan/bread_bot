import pytest

from bread_bot.common.models import DictionaryEntity
from bread_bot.common.services.morph_service import MorphService


async def test_tokenize():
    text = """–£—Ç—Ä–æ–º:\n1)–±–µ–≥–∏—Ç\n2)—Ö–ª–µ–±–∞ –ª–æ–≤–∏—Ç—å\n3)@–ø–∏—Å–∞—Ç—å\n\n–í–µ—á–µ—Ä–æ–º:\n1)–∞–Ω–∂—É–º–∞–Ω—è\n2)"–ø–∏—Å–∞—Ç"\n3)–ª–æ–≤–∏—Ç—å\nüëâ"""
    result = MorphService.tokenize_text(text)
    assert result[0] == ["–£—Ç—Ä–æ–º", ":"]
    assert result[1] == ["1", ")", "–±–µ–≥–∏—Ç"]
    assert result[2] == ["2", ")", "—Ö–ª–µ–±–∞", " ", "–ª–æ–≤–∏—Ç—å"]
    assert result[3] == ["3", ")@", "–ø–∏—Å–∞—Ç—å"]
    assert result[4] == []
    assert result[5] == ["–í–µ—á–µ—Ä–æ–º", ":"]
    assert result[6] == ["1", ")", "–∞–Ω–∂—É–º–∞–Ω—è"]
    assert result[7] == ["2", ')"', "–ø–∏—Å–∞—Ç", '"']
    assert result[8] == ["3", ")", "–ª–æ–≤–∏—Ç—å"]
    assert result[9] == ["üëâ"]


@pytest.mark.parametrize(
    "text",
    [
        (
            "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–æ–∫—Ç–æ—Ä–æ–º —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫ –∏ –±–æ–ª—å—à–æ–π –ø–∏—Ü—Ü–µ–π?\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            ".\n"
            "–ë–æ–ª—å—à–∞—è –ø–∏—Ü—Ü–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –Ω–∞–∫–æ—Ä–º–∏—Ç—å —Å–µ–º—å—é –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —á–µ–ª–æ–≤–µ–∫."
        ),
    ],
)
async def test_morph_corner_cases(db, dictionary_entity_factory, member_service, message_service, mocker, text):
    mocker.patch(
        "bread_bot.common.services.morph_service.MorphService._get_maximum_words_to_replace",
        return_value=100,
    )
    for word in [
        "2022",
    ]:
        await dictionary_entity_factory(chat_id=member_service.chat.id, value=word)
    assert await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)
    result = await MorphService(db, chat_id=member_service.chat.id).morph_text(text)
    assert result == text


async def test_morph_text(db, dictionary_entity_factory, member_service, message_service, mocker):
    text = "–¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 1830 –ü—É—à–∫–∏–Ω –≤–ø–ª–æ—Ç–Ω—É—é –∑–∞–Ω—è–ª—Å—è \n-\n\n\n–ø—Ä–æ–∑–æ–π"
    mocker.patch(
        "bread_bot.common.services.morph_service.MorphService._get_maximum_words_to_replace",
        return_value=100,
    )
    for word in ["–∑–∞—Ä–∏—Ñ", "–ø—Ä—ã–≥–∞—Ç—å", "–º—è–≥–∫–∏–π", "2022", "–≥–æ–ª–æ–≤–∞", "–¥–æ"]:
        await dictionary_entity_factory(chat_id=member_service.chat.id, value=word)
    assert await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)

    result = await MorphService(db, chat_id=member_service.chat.id).morph_text(text)
    assert result.startswith("–¢–æ–ª—å–∫–æ –¥–æ 1830 –∑–∞—Ä–∏—Ñ –≤–ø–ª–æ—Ç–Ω—É—é –ø—Ä—ã–≥–∞–ª")
    assert result.split()[-1] in ("–≥–æ–ª–æ–≤–æ–π", "–≥–æ–ª–æ–≤–æ—é")


@pytest.mark.parametrize(
    "line_number, min_of_morphed, max_of_morphed",
    [
        (0, 1, 1),
        (1, 1, 2),
        (2, 0, 0),
        (3, 1, 3),
        (4, 1, 1),
    ],
)
async def test_only_words(
    db, dictionary_entity_factory, member_service, message_service, line_number, min_of_morphed, max_of_morphed
):
    text = (
        "–ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π \n –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π-\n\n–ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π "
        "–ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π –ø—Ä–æ–∑–æ–π\n–ø—Ä–æ–∑–æ–π\n—Å–ª–æ–≤–æ —Å–ª–æ–≤–æ —Å–ª–æ–≤–æ —Å–ª–æ–≤–æ"
    )
    for word in ["–∑–∞—Ä–∏—Ñ", "–ø—Ä—ã–≥–∞—Ç—å", "–º—è–≥–∫–∏–π", "2022", "–≥–æ–ª–æ–≤–æ–π", "–¥–æ"]:
        await dictionary_entity_factory(chat_id=member_service.chat.id, value=word)
    assert await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)

    result = await MorphService(db, chat_id=member_service.chat.id).morph_text(text)
    count = 0
    for word in result.splitlines()[line_number].split():
        if word in ("–≥–æ–ª–æ–≤–æ–π", "–≥–æ–ª–æ–≤–æ—é"):
            count += 1
    assert max_of_morphed >= count >= min_of_morphed


@pytest.mark.parametrize(
    "debug, expected",
    [
        (False, "—Å–ª–æ–≤–æ\n—Å–ª–æ–≤–∞\n—Å–ª–æ–≤—É\n—Å–ª–æ–≤–æ\n—Å–ª–æ–≤–æ–º\n—Å–ª–æ–≤–µ\n—Å–ª–æ–≤–∞\n—Å–ª–æ–≤\n—Å–ª–æ–≤–∞–º\n—Å–ª–æ–≤–∞\n—Å–ª–æ–≤–∞–º–∏\n—Å–ª–æ–≤–∞—Ö"),
        (
            True,
            (
                "NOUN,inan,neut sing,nomn: —Å–ª–æ–≤–æ\n"
                "NOUN,inan,neut sing,gent: —Å–ª–æ–≤–∞\n"
                "NOUN,inan,neut sing,datv: —Å–ª–æ–≤—É\n"
                "NOUN,inan,neut sing,accs: —Å–ª–æ–≤–æ\n"
                "NOUN,inan,neut sing,ablt: —Å–ª–æ–≤–æ–º\n"
                "NOUN,inan,neut sing,loct: —Å–ª–æ–≤–µ\n"
                "NOUN,inan,neut plur,nomn: —Å–ª–æ–≤–∞\n"
                "NOUN,inan,neut plur,gent: —Å–ª–æ–≤\n"
                "NOUN,inan,neut plur,datv: —Å–ª–æ–≤–∞–º\n"
                "NOUN,inan,neut plur,accs: —Å–ª–æ–≤–∞\n"
                "NOUN,inan,neut plur,ablt: —Å–ª–æ–≤–∞–º–∏\n"
                "NOUN,inan,neut plur,loct: —Å–ª–æ–≤–∞—Ö"
            ),
        ),
    ],
)
async def test_morph_word(db, dictionary_entity_factory, member_service, message_service, debug, expected):
    text = "–°–ª–æ–≤–æ"
    result = MorphService.morph_word(word=text, debug=debug)
    assert result == expected


async def test_add_value(db, member_service, message_service):
    await MorphService(db, chat_id=member_service.chat.id).add_values(["word1", "word2"])
    entities = await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)
    assert [e.value for e in entities] == ["word1", "word2"]


async def test_delete_value(db, member_service, message_service, dictionary_entity_factory):
    await dictionary_entity_factory(chat_id=member_service.chat.id, value="word1")
    await dictionary_entity_factory(chat_id=member_service.chat.id, value="word2")
    entities = await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)
    assert [e.value for e in entities] == ["word1", "word2"]
    await MorphService(db, chat_id=member_service.chat.id).delete_value("word2")
    entities = await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)
    assert [e.value for e in entities] == [
        "word1",
    ]


async def test_show_values(db, member_service, message_service, dictionary_entity_factory):
    await dictionary_entity_factory(chat_id=member_service.chat.id, value="word1")
    await dictionary_entity_factory(chat_id=member_service.chat.id, value="word2")
    entities = await DictionaryEntity.async_filter(db, DictionaryEntity.chat_id == member_service.chat.id)
    assert [e.value for e in entities] == ["word1", "word2"]
    result = await MorphService(db, chat_id=member_service.chat.id).show_values()
    assert result == "word1\nword2"
